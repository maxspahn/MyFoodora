Input
int: day1/int: month1/int: year1, the first date
int: day2/int: month2/int: year2, the second date
Sorted ArrayList<Order>: listOrders, all the complete orders

Output
double: profit between the first and the second date

Algorithm
double profit = 0
int i = 0
int size = size of listOrders
//Find the index of the first order made in year1
while(i<size & year of listOrders.get(i) < year1){
	i++}
//Find the index of the first order made in month1/year1
while(i<size & year of listOrderss.get(i)=year1 & month of listOrders.get(i) < month1){
	i++}
//Find the index of the first order made on day1/month1/year1
while(i<size & month of listOrders.get(i)=month1 & year of listOrders.get(i)=year1 & day of listOrders.get(i) < day1){
	i++}

//Find the index of the first order made in year2
while(i<size & year of listOrders.get(i) < year2){
	profit += listOrders.get(i).getProfit();
	i++;}
//Find the index of the first order made in month2/year2			
while(i<size & year of listOrderss.get(i)=year2 & month of listOrders.get(i) < month2){
	profit += listOrders.get(i).getProfit();
	i++;}
//Find the index of the first order made on day1/month1/year1
while(i<size & month of listOrders.get(i)=month2 & year of listOrderss.get(i)=year2 & day of listOrders.get(i) < day2){
	profit += listOrders.get(i).getProfit();
	i++;}